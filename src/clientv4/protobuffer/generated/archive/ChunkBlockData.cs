// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace generated.archive
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChunkBlockData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ChunkBlockData GetRootAsChunkBlockData(ByteBuffer _bb) { return GetRootAsChunkBlockData(_bb, new ChunkBlockData()); }
  public static ChunkBlockData GetRootAsChunkBlockData(ByteBuffer _bb, ChunkBlockData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChunkBlockData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong BlockId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint Direction { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<generated.archive.ChunkBlockData> CreateChunkBlockData(FlatBufferBuilder builder,
      ulong block_id = 0,
      uint direction = 0) {
    builder.StartTable(2);
    ChunkBlockData.AddBlockId(builder, block_id);
    ChunkBlockData.AddDirection(builder, direction);
    return ChunkBlockData.EndChunkBlockData(builder);
  }

  public static void StartChunkBlockData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBlockId(FlatBufferBuilder builder, ulong blockId) { builder.AddUlong(0, blockId, 0); }
  public static void AddDirection(FlatBufferBuilder builder, uint direction) { builder.AddUint(1, direction, 0); }
  public static Offset<generated.archive.ChunkBlockData> EndChunkBlockData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<generated.archive.ChunkBlockData>(o);
  }
}


static public class ChunkBlockDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BlockId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Direction*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
